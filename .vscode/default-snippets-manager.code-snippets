{
	"supabase helper": {
		"prefix": "supabase helper",
		"description": "supabase helper",
		"scope": "dart",
		"body": [
			"import 'dart:developer';\r",
			"import 'dart:io';\r",
			"\r",
			"import 'package:image_picker/image_picker.dart';\r",
			"import 'package:supabase_flutter/supabase_flutter.dart';\r",
			"import 'package:supabase_tutorial/constants.dart';\r",
			"\r",
			"class SupabaseHelper {\r",
			"  static init({\r",
			"    required String publicUrl,\r",
			"    required String publicNanoKey,\r",
			"  }) async {\r",
			"    await Supabase.initialize(url: publicUrl, anonKey: publicNanoKey);\r",
			"  }\r",
			"\r",
			"  static Future<void> login({\r",
			"    required String email,\r",
			"    required String password,\r",
			"  }) async {\r",
			"    try {\r",
			"      await Supabase.instance.client.auth.signInWithPassword(\r",
			"        email: email,\r",
			"        password: password,\r",
			"      );\r",
			"      log(\"the Login is success\");\r",
			"    } catch (e) {\r",
			"      log(\"the error is \\$e\");\r",
			"    }\r",
			"  }\r",
			"\r",
			"  static Future<void> register({\r",
			"    required String email,\r",
			"    required String password,\r",
			"  }) async {\r",
			"    try {\r",
			"      await Supabase.instance.client.auth.signUp(\r",
			"        email: email,\r",
			"        password: password,\r",
			"      );\r",
			"      log(\"the Register is success\");\r",
			"    } catch (e) {\r",
			"      log(\"the error is \\$e\");\r",
			"    }\r",
			"  }\r",
			"\r",
			"  static Future selectAllData(List<Map<String, dynamic>> todos) async {\r",
			"    todos = await Supabase.instance.client\r",
			"        .from(Consts.kDatabaseName)\r",
			"        .select()\r",
			"        .order(\"created_at\", ascending: false);\r",
			"  }\r",
			"\r",
			"  static Future insertData(String title, bool isDone, dynamic todos) async {\r",
			"    await Supabase.instance.client.from(Consts.kDatabaseName).insert({\r",
			"      \"title\": title,\r",
			"      \"isDone\": isDone,\r",
			"    });\r",
			"    selectAllData(todos);\r",
			"  }\r",
			"\r",
			"  static Future updateData(int id, bool isDone, dynamic todos) async {\r",
			"    await Supabase.instance.client\r",
			"        .from(Consts.kDatabaseName)\r",
			"        .update({\"isDone\": isDone})\r",
			"        .eq('id', id);\r",
			"    selectAllData(todos);\r",
			"  }\r",
			"\r",
			"  static Future deleteItem(int id, dynamic todos) async {\r",
			"    await Supabase.instance.client\r",
			"        .from(Consts.kDatabaseName)\r",
			"        .delete()\r",
			"        .eq('id', id);\r",
			"    selectAllData(todos);\r",
			"  }\r",
			"\r",
			"  static Future selectAllDataRealTime(dynamic todos) async {\r",
			"    Supabase.instance.client\r",
			"        .from(Consts.kDatabaseName)\r",
			"        .stream(primaryKey: ['id'])\r",
			"        .listen((event) {\r",
			"          log(\"the event values is : \\${event.toString()}\");\r",
			"          todos = event;\r",
			"        });\r",
			"  }\r",
			"\r",
			"  static String? imageUrl;\r",
			"  static Future<File?> pickImage() async {\r",
			"    final ImagePicker picker = ImagePicker();\r",
			"    final XFile? image = await picker.pickImage(source: ImageSource.camera);\r",
			"    if (image == null) return null;\r",
			"    final File imageFile = File(image.path);\r",
			"    return imageFile;\r",
			"  }\r",
			"\r",
			"  static Future uploadImage() async {\r",
			"    final imageFile = await pickImage();\r",
			"    if (imageFile == null) return;\r",
			"    final String timeStamp = DateTime.now().microsecondsSinceEpoch.toString();\r",
			"    final String uniqueImagePath =\r",
			"        \"\\${timeStamp}_\\${imageFile.path.split('/').last}\";\r",
			"    await Supabase.instance.client.storage\r",
			"        .from(Consts.kStorageBucket)\r",
			"        .upload(uniqueImagePath, imageFile);\r",
			"    imageUrl = Supabase.instance.client.storage\r",
			"        .from(Consts.kStorageBucket)\r",
			"        .getPublicUrl(uniqueImagePath);\r",
			"    // setState(() {\r",
			"\r",
			"    // });\r",
			"  }\r",
			"\r",
			"  static Future deleteImgae() async {\r",
			"    if (imageUrl == null) return null;\r",
			"    await Supabase.instance.client.storage.from(Consts.kStorageBucket).remove([\r",
			"      imageUrl!.split('/').last,\r",
			"    ]);\r",
			"    // setState(() {\r",
			"    //   imageUrl = null ;\r",
			"    // });\r",
			"  }\r",
			"}\r",
			""
		]
	},
	"android manifest for image picker ": {
		"prefix": "android manifest for image picker ",
		"description": "android manifest for image picker ",
		"scope": "xml",
		"body": [
			"<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\">\r",
			"    <!-- The INTERNET permission is required for development. Specifically,\r",
			"         the Flutter tool needs it to communicate with the running application\r",
			"         to allow setting breakpoints, to provide hot reload, etc.\r",
			"    -->\r",
			"    <uses-permission android:name=\"android.permission.INTERNET\"/>\r",
			"    <uses-permission android:name=\"android.permission.CAMERA\"/>\r",
			"    <uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\"/>\r",
			"    <uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\"/>\r",
			"\r",
			"</manifest>"
		]
	},
	"initialize Supabase": {
		"prefix": "initialize Supabase",
		"description": "initialize Supabase",
		"scope": "dart",
		"body": [
			"void main() async {\r",
			"  WidgetsFlutterBinding.ensureInitialized();\r",
			"\r",
			"  await Supabase.initialize(\r",
			"    url: Consts.kSUPABASE_URL,\r",
			"    anonKey: Consts.kSUPABASE_ANON_KEY,\r",
			"  );\r",
			"\r",
			"  runApp(MyApp());\r",
			"}"
		]
	}
}